type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, last: Int, orderBy: LinkOrderByInput): Feed!
}

type Mutation {
  # Create a link
  post(url: String!, description: String!): Link!

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload 
  # Update a link
  updateLink(id: ID!, url: String, description: String): Link
  # Delete a link
  deleteLink(id: ID!): Link
  vote(linkId: ID!): Vote
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
    token: String
    user: User
}

type User { 
    id: ID!
    name: String,
    email: String,
    links: [Link!]!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}